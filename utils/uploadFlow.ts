import { supabase } from './supabase';
import { processVideoForUpload, generateThumbnail, cleanupTempFiles } from './videoCompression';\nimport * as FileSystem from 'expo-file-system';\n\nexport interface UploadProgress {\n  stage: 'processing' | 'uploading' | 'mux_processing' | 'complete' | 'error';\n  progress: number; // 0-1\n  message: string;\n  postId?: string;\n  error?: string;\n}\n\nexport interface UploadOptions {\n  maxResolutionTier?: '2160p' | '1440p' | '1080p' | '720p';\n  generateThumbnail?: boolean;\n  onProgress?: (progress: UploadProgress) => void;\n}\n\nexport class VideoUploadService {\n  \n  /**\n   * Complete video upload flow with Mux integration\n   */\n  static async uploadVideo(\n    videoUri: string,\n    postData: {\n      content: string;\n      userId: string;\n    },\n    options: UploadOptions = {}\n  ): Promise<{ success: boolean; postId?: string; error?: string }> {\n    \n    const {\n      maxResolutionTier = '1080p',\n      generateThumbnail: shouldGenerateThumbnail = true,\n      onProgress\n    } = options;\n\n    const tempFiles: string[] = [];\n\n    try {\n      // Stage 1: Process video (trim/compress)\n      onProgress?.({ \n        stage: 'processing', \n        progress: 0.1, \n        message: 'Processing video...' \n      });\n\n      const { uri: processedUri, metadata, wasProcessed } = await processVideoForUpload(videoUri);\n      \n      if (wasProcessed) {\n        tempFiles.push(processedUri);\n      }\n\n      onProgress?.({ \n        stage: 'processing', \n        progress: 0.2, \n        message: 'Creating post...' \n      });\n\n      // Stage 2: Create post in database\n      const { data: postData: newPost, error: createError } = await supabase\n        .from('posts')\n        .insert({\n          content: postData.content,\n          author_id: postData.userId,\n          file_type: 'video',\n          mux_ready: false,\n          visibility: 'public'\n        })\n        .select('id')\n        .single();\n\n      if (createError || !newPost) {\n        throw new Error(`Failed to create post: ${createError?.message}`);\n      }\n\n      const postId = newPost.id;\n      console.log('VideoUpload: Created post:', postId);\n\n      onProgress?.({ \n        stage: 'processing', \n        progress: 0.3, \n        message: 'Setting up Mux upload...',\n        postId \n      });\n\n      // Stage 3: Create Mux upload\n      const { data: uploadData, error: uploadError } = await supabase.functions.invoke('create-mux-upload', {\n        body: {\n          user_id: postData.userId,\n          post_id: postId,\n          max_resolution_tier: maxResolutionTier\n        }\n      });\n\n      if (uploadError || !uploadData?.uploadUrl) {\n        throw new Error(`Failed to create Mux upload: ${uploadError?.message}`);\n      }\n\n      console.log('VideoUpload: Got Mux upload URL:', uploadData.uploadId);\n\n      onProgress?.({ \n        stage: 'uploading', \n        progress: 0.4, \n        message: 'Uploading to Mux...',\n        postId \n      });\n\n      // Stage 4: Upload to Mux\n      await this.uploadToMux(processedUri, uploadData.uploadUrl, (progress) => {\n        onProgress?.({\n          stage: 'uploading',\n          progress: 0.4 + (progress * 0.4), // 40% to 80%\n          message: `Uploading... ${Math.round(progress * 100)}%`,\n          postId\n        });\n      });\n\n      onProgress?.({ \n        stage: 'mux_processing', \n        progress: 0.8, \n        message: 'Processing video...',\n        postId \n      });\n\n      // Stage 5: Generate thumbnail if requested\n      if (shouldGenerateThumbnail) {\n        try {\n          const thumbnailUri = await generateThumbnail(processedUri);\n          \n          // Upload thumbnail to Supabase storage\n          const thumbnailUrl = await this.uploadThumbnail(thumbnailUri, postId);\n          \n          if (thumbnailUrl) {\n            await supabase\n              .from('posts')\n              .update({ thumbnail_url: thumbnailUrl })\n              .eq('id', postId);\n          }\n          \n          tempFiles.push(thumbnailUri);\n        } catch (thumbnailError) {\n          console.warn('VideoUpload: Thumbnail generation failed:', thumbnailError);\n          // Don't fail the upload for thumbnail issues\n        }\n      }\n\n      onProgress?.({ \n        stage: 'mux_processing', \n        progress: 0.9, \n        message: 'Waiting for video processing...',\n        postId \n      });\n\n      // Stage 6: Wait for Mux processing (optional polling)\n      // In production, you might poll the post status or rely on webhooks\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      onProgress?.({ \n        stage: 'complete', \n        progress: 1.0, \n        message: 'Upload complete!',\n        postId \n      });\n\n      console.log('VideoUpload: Upload complete:', postId);\n\n      // Cleanup temp files\n      if (tempFiles.length > 0) {\n        cleanupTempFiles(tempFiles);\n      }\n\n      return { success: true, postId };\n\n    } catch (error) {\n      console.error('VideoUpload: Upload failed:', error);\n      \n      onProgress?.({ \n        stage: 'error', \n        progress: 0, \n        message: 'Upload failed',\n        error: error.message \n      });\n\n      // Cleanup temp files on error\n      if (tempFiles.length > 0) {\n        cleanupTempFiles(tempFiles);\n      }\n\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Upload file to Mux using direct upload URL\n   */\n  private static async uploadToMux(\n    videoUri: string, \n    uploadUrl: string, \n    onProgress?: (progress: number) => void\n  ): Promise<void> {\n    \n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      \n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          const progress = event.loaded / event.total;\n          onProgress?.(progress);\n        }\n      });\n\n      xhr.addEventListener('load', () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          console.log('VideoUpload: Mux upload complete');\n          resolve();\n        } else {\n          reject(new Error(`Upload failed with status ${xhr.status}`));\n        }\n      });\n\n      xhr.addEventListener('error', () => {\n        reject(new Error('Upload network error'));\n      });\n\n      xhr.open('PUT', uploadUrl);\n      xhr.setRequestHeader('Content-Type', 'video/mp4');\n      \n      // Read file and upload\n      FileSystem.readAsStringAsync(videoUri, {\n        encoding: FileSystem.EncodingType.Base64\n      }).then(base64Data => {\n        const binaryString = atob(base64Data);\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        xhr.send(bytes);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Upload thumbnail to Supabase storage\n   */\n  private static async uploadThumbnail(thumbnailUri: string, postId: string): Promise<string | null> {\n    try {\n      const fileName = `thumbnails/${postId}.jpg`;\n      \n      // Read thumbnail file\n      const base64Data = await FileSystem.readAsStringAsync(thumbnailUri, {\n        encoding: FileSystem.EncodingType.Base64\n      });\n\n      // Upload to Supabase storage\n      const { data, error } = await supabase.storage\n        .from('post-media')\n        .upload(fileName, decode(base64Data), {\n          contentType: 'image/jpeg',\n          upsert: true\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from('post-media')\n        .getPublicUrl(fileName);\n\n      return publicUrlData.publicUrl;\n    } catch (error) {\n      console.error('VideoUpload: Thumbnail upload failed:', error);\n      return null;\n    }\n  }\n}\n\n// Helper function to decode base64 to Uint8Array\nfunction decode(base64: string): Uint8Array {\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n\n// Convenience export\nexport const uploadVideo = VideoUploadService.uploadVideo;